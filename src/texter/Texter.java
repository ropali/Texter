/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package texter;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import org.fife.rsta.ui.GoToDialog;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;

/**
 *
 * @author ropali
 */
public class Texter extends javax.swing.JFrame {

    public static final String TITLE = "Texter";
    private JFileChooser fileSaver;
    private File openedFile = null;
    AutoSave autoSaver;

    /**
     * Creates new form Texter
     */
    public Texter() throws UnsupportedLookAndFeelException {
        initComponents();
        rTextScrollPane.setLineNumbersEnabled(true);
        rTextScrollPane.setFoldIndicatorEnabled(true);
        setTitle(TITLE + " - . - Untitled");

        //set the size to the screen size of the monitor
        Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(size);

        textArea.setBracketMatchingEnabled(true);
        textArea.setCodeFoldingEnabled(true);
        textArea.setCloseCurlyBraces(true);

        //set the tab size
        lblTabsize.setText("Tab Size " + textArea.getTabSize() + "  | ");

        setTheme();

        //initialy keep the copy file path menuitem disable
        copyFilePathNameMenuItem.setEnabled(false);
        copyFilePathOnlyMenuItem.setEnabled(false);

        //set mnemonics
        MenuFile.setMnemonic(KeyEvent.VK_F);
        MenuEdit.setMnemonic(KeyEvent.VK_E);
        MenuView.setMnemonic(KeyEvent.VK_V);
        searchMenu.setMnemonic(KeyEvent.VK_S);
        toolsMenu.setMnemonic(KeyEvent.VK_T);

        //set document listener so that we can track the changes and show if it is saved of not
        textArea.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent e) {
                getLine_Col_No();//displays the line n col number if document is updated
            }
        });

        textArea.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!textArea.equals("")) {
                    try {
                        setTitle(TITLE + "- * - " + openedFile.getAbsolutePath());
                        lblAutoSave.setText("File Not Saved!");
                    } catch (NullPointerException e1) {

                    }
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e2) {
                if (!textArea.equals("")) {
                    try {
                        setTitle(TITLE + "- * - " + openedFile.getAbsolutePath());
                        lblAutoSave.setText("File Not Saved!");
                    } catch (NullPointerException e1) {

                    }
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e4) {
                if (!textArea.equals("")) {
                    try {
                        setTitle(TITLE + "- * - " + openedFile.getAbsolutePath());
                        lblAutoSave.setText("File Not Saved!");
                    } catch (NullPointerException e1) {

                    }
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rSyntaxTextAreaHighlighter1 = new org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaHighlighter();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenuItem2 = new javax.swing.JMenuItem();
        rTextScrollPane = new org.fife.ui.rtextarea.RTextScrollPane();
        textArea = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        statusbarPanel = new javax.swing.JPanel();
        lblLineNo = new javax.swing.JLabel();
        lblFileType = new javax.swing.JLabel();
        lblTabsize = new javax.swing.JLabel();
        lblAutoSave = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        menuNewFile = new javax.swing.JMenuItem();
        menuOpen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuNewWindow = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        menuCloseFile = new javax.swing.JMenuItem();
        menuQuit = new javax.swing.JMenuItem();
        MenuEdit = new javax.swing.JMenu();
        MenuItemUndo = new javax.swing.JMenuItem();
        MenuItemRedo = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        MenuItemCOpy = new javax.swing.JMenuItem();
        MenuItemCut = new javax.swing.JMenuItem();
        MenuItemPaste = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        MenuView = new javax.swing.JMenu();
        lineNumberCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        statusBarCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        lineHighlightCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        wrapTextCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jMenu1 = new javax.swing.JMenu();
        defaultRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        dracullaRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        metalRadioButtonMenuItem3 = new javax.swing.JRadioButtonMenuItem();
        blueRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        pinkRadioButtonMenuItem5 = new javax.swing.JRadioButtonMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        jMenu3 = new javax.swing.JMenu();
        increaFontMenuItem = new javax.swing.JMenuItem();
        decreaseFontMenuItem = new javax.swing.JMenuItem();
        searchMenu = new javax.swing.JMenu();
        gotoMenuItem = new javax.swing.JMenuItem();
        findMenuItem = new javax.swing.JMenuItem();
        findAndReplaceMenuItem = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        openTerMenuItem = new javax.swing.JMenuItem();
        autoSaveCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        copyFilePathNameMenuItem = new javax.swing.JMenuItem();
        copyFilePathOnlyMenuItem = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setTabSize(4);
        textArea.setCodeFoldingEnabled(true);
        textArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textAreaKeyTyped(evt);
            }
        });
        rTextScrollPane.setViewportView(textArea);

        lblLineNo.setText("Line 0 Col 0");

        lblFileType.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblFileType.setText("Plain Text");

        lblTabsize.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTabsize.setText("Tab Size  |");

        javax.swing.GroupLayout statusbarPanelLayout = new javax.swing.GroupLayout(statusbarPanel);
        statusbarPanel.setLayout(statusbarPanelLayout);
        statusbarPanelLayout.setHorizontalGroup(
            statusbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusbarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLineNo, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addComponent(lblAutoSave, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTabsize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblFileType)
                .addGap(30, 30, 30))
        );
        statusbarPanelLayout.setVerticalGroup(
            statusbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusbarPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLineNo)
                    .addComponent(lblFileType)
                    .addComponent(lblTabsize)
                    .addComponent(lblAutoSave))
                .addContainerGap())
        );

        MenuFile.setText("File");

        menuNewFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNewFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/new-file-icon.png"))); // NOI18N
        menuNewFile.setText("New");
        menuNewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewFileActionPerformed(evt);
            }
        });
        MenuFile.add(menuNewFile);

        menuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/open-file-icon.png"))); // NOI18N
        menuOpen.setText("Open");
        menuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        MenuFile.add(menuOpen);
        MenuFile.add(jSeparator1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Save-icon.png"))); // NOI18N
        jMenuItem3.setText("Save");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        MenuFile.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Save-icon.png"))); // NOI18N
        jMenuItem4.setText("Save As");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        MenuFile.add(jMenuItem4);
        MenuFile.add(jSeparator2);

        menuNewWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuNewWindow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/window-icon.png"))); // NOI18N
        menuNewWindow.setText("New Window");
        menuNewWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewWindowActionPerformed(evt);
            }
        });
        MenuFile.add(menuNewWindow);
        MenuFile.add(jSeparator3);

        menuCloseFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuCloseFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete-file-icon.png"))); // NOI18N
        menuCloseFile.setText("Close File");
        menuCloseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCloseFileActionPerformed(evt);
            }
        });
        MenuFile.add(menuCloseFile);

        menuQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuQuit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Actions-application-exit-icon.png"))); // NOI18N
        menuQuit.setText("Quit");
        menuQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuQuitActionPerformed(evt);
            }
        });
        MenuFile.add(menuQuit);

        jMenuBar1.add(MenuFile);

        MenuEdit.setText("Edit");

        MenuItemUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Undo-icon.png"))); // NOI18N
        MenuItemUndo.setText("Undo");
        MenuItemUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemUndoActionPerformed(evt);
            }
        });
        MenuEdit.add(MenuItemUndo);

        MenuItemRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/redo-icon.png"))); // NOI18N
        MenuItemRedo.setText("Redo");
        MenuItemRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemRedoActionPerformed(evt);
            }
        });
        MenuEdit.add(MenuItemRedo);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Cursor-Select-icon.png"))); // NOI18N
        jMenuItem1.setText("Select All");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        MenuEdit.add(jMenuItem1);
        MenuEdit.add(jSeparator4);

        MenuItemCOpy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemCOpy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/copy-icon.png"))); // NOI18N
        MenuItemCOpy.setText("Copy");
        MenuItemCOpy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemCOpyActionPerformed(evt);
            }
        });
        MenuEdit.add(MenuItemCOpy);

        MenuItemCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cut-icon.png"))); // NOI18N
        MenuItemCut.setText("Cut");
        MenuItemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemCutActionPerformed(evt);
            }
        });
        MenuEdit.add(MenuItemCut);

        MenuItemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Actions-edit-paste-icon.png"))); // NOI18N
        MenuItemPaste.setText("Paste");
        MenuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemPasteActionPerformed(evt);
            }
        });
        MenuEdit.add(MenuItemPaste);
        MenuEdit.add(jSeparator8);

        jMenuBar1.add(MenuEdit);

        MenuView.setText("View");

        lineNumberCheckBoxMenuItem.setSelected(true);
        lineNumberCheckBoxMenuItem.setText("Show Line Number");
        lineNumberCheckBoxMenuItem.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lineNumberCheckBoxMenuItemStateChanged(evt);
            }
        });
        lineNumberCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineNumberCheckBoxMenuItemActionPerformed(evt);
            }
        });
        MenuView.add(lineNumberCheckBoxMenuItem);

        statusBarCheckBoxMenuItem.setSelected(true);
        statusBarCheckBoxMenuItem.setText("Show Status Bar");
        statusBarCheckBoxMenuItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                statusBarCheckBoxMenuItemItemStateChanged(evt);
            }
        });
        MenuView.add(statusBarCheckBoxMenuItem);

        lineHighlightCheckBoxMenuItem.setSelected(true);
        lineHighlightCheckBoxMenuItem.setText("Show Line Highlighting");
        lineHighlightCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineHighlightCheckBoxMenuItemActionPerformed(evt);
            }
        });
        MenuView.add(lineHighlightCheckBoxMenuItem);
        MenuView.add(jSeparator5);

        wrapTextCheckBoxMenuItem.setText("Wrap Text");
        wrapTextCheckBoxMenuItem.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                wrapTextCheckBoxMenuItemStateChanged(evt);
            }
        });
        MenuView.add(wrapTextCheckBoxMenuItem);
        MenuView.add(jSeparator6);

        jMenu1.setText("Themes");

        buttonGroup1.add(defaultRadioButtonMenuItem);
        defaultRadioButtonMenuItem.setSelected(true);
        defaultRadioButtonMenuItem.setText("Default");
        defaultRadioButtonMenuItem.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                defaultRadioButtonMenuItemStateChanged(evt);
            }
        });
        jMenu1.add(defaultRadioButtonMenuItem);

        buttonGroup1.add(dracullaRadioButtonMenuItem);
        dracullaRadioButtonMenuItem.setText("Draculla");
        dracullaRadioButtonMenuItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dracullaRadioButtonMenuItemItemStateChanged(evt);
            }
        });
        dracullaRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dracullaRadioButtonMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(dracullaRadioButtonMenuItem);

        buttonGroup1.add(metalRadioButtonMenuItem3);
        metalRadioButtonMenuItem3.setText("Metal Grey");
        metalRadioButtonMenuItem3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                metalRadioButtonMenuItem3ItemStateChanged(evt);
            }
        });
        jMenu1.add(metalRadioButtonMenuItem3);

        buttonGroup1.add(blueRadioButtonMenuItem);
        blueRadioButtonMenuItem.setText("Blue Ocean");
        blueRadioButtonMenuItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                blueRadioButtonMenuItemItemStateChanged(evt);
            }
        });
        jMenu1.add(blueRadioButtonMenuItem);

        buttonGroup1.add(pinkRadioButtonMenuItem5);
        pinkRadioButtonMenuItem5.setText("Pink Beauty");
        pinkRadioButtonMenuItem5.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pinkRadioButtonMenuItem5ItemStateChanged(evt);
            }
        });
        jMenu1.add(pinkRadioButtonMenuItem5);

        MenuView.add(jMenu1);
        MenuView.add(jSeparator7);

        jMenu3.setText("Font");

        increaFontMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        increaFontMenuItem.setText("Increase Font");
        increaFontMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaFontMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(increaFontMenuItem);

        decreaseFontMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        decreaseFontMenuItem.setText("Decrease Font");
        decreaseFontMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseFontMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(decreaseFontMenuItem);

        MenuView.add(jMenu3);

        jMenuBar1.add(MenuView);

        searchMenu.setText("Search");

        gotoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        gotoMenuItem.setText("Go To Line");
        gotoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gotoMenuItemActionPerformed(evt);
            }
        });
        searchMenu.add(gotoMenuItem);

        findMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        findMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/search-icon.png"))); // NOI18N
        findMenuItem.setText("Find");
        findMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMenuItemActionPerformed(evt);
            }
        });
        searchMenu.add(findMenuItem);

        findAndReplaceMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        findAndReplaceMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Actions-find-replace-icon.png"))); // NOI18N
        findAndReplaceMenuItem.setText("Find And Replace");
        findAndReplaceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findAndReplaceMenuItemActionPerformed(evt);
            }
        });
        searchMenu.add(findAndReplaceMenuItem);

        jMenuBar1.add(searchMenu);

        toolsMenu.setText("Tools");

        openTerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        openTerMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apps-Terminal-icon.png"))); // NOI18N
        openTerMenuItem.setText("Open Terminal Here");
        openTerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openTerMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(openTerMenuItem);

        autoSaveCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        autoSaveCheckBoxMenuItem.setText("Auto Save");
        autoSaveCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoSaveCheckBoxMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(autoSaveCheckBoxMenuItem);
        toolsMenu.add(jSeparator9);

        copyFilePathNameMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        copyFilePathNameMenuItem.setText("Copy Full File Path With File Name");
        copyFilePathNameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyFilePathNameMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(copyFilePathNameMenuItem);

        copyFilePathOnlyMenuItem.setText("Copy Full File Path Only");
        copyFilePathOnlyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyFilePathOnlyMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(copyFilePathOnlyMenuItem);

        jMenuBar1.add(toolsMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rTextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(statusbarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(rTextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusbarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setBounds(0, 0, 667, 489);
    }// </editor-fold>//GEN-END:initComponents

    private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenActionPerformed
        openFile();
    }//GEN-LAST:event_menuOpenActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        saveFile();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void menuNewWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewWindowActionPerformed
        try {
            new Texter().setVisible(true);
        } catch (UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_menuNewWindowActionPerformed

    private void menuQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuQuitActionPerformed
        dispose();
    }//GEN-LAST:event_menuQuitActionPerformed

    private void menuNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewFileActionPerformed
        textArea.setText("");
        setTitle(TITLE + " - . - Untitled");
        openedFile = null;
        setSyntax("txt");
    }//GEN-LAST:event_menuNewFileActionPerformed

    private void MenuItemRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemRedoActionPerformed
        textArea.redoLastAction();
    }//GEN-LAST:event_MenuItemRedoActionPerformed

    private void MenuItemUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemUndoActionPerformed
        textArea.undoLastAction();
    }//GEN-LAST:event_MenuItemUndoActionPerformed

    private void MenuItemCOpyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCOpyActionPerformed
        textArea.copy();
    }//GEN-LAST:event_MenuItemCOpyActionPerformed

    private void MenuItemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCutActionPerformed
        textArea.cut();
    }//GEN-LAST:event_MenuItemCutActionPerformed

    private void MenuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemPasteActionPerformed
        textArea.paste();

    }//GEN-LAST:event_MenuItemPasteActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        textArea.selectAll();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void wrapTextCheckBoxMenuItemStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_wrapTextCheckBoxMenuItemStateChanged
        if (wrapTextCheckBoxMenuItem.isSelected()) {
            textArea.setLineWrap(true);
        } else {
            textArea.setLineWrap(false);
        }
    }//GEN-LAST:event_wrapTextCheckBoxMenuItemStateChanged

    private void statusBarCheckBoxMenuItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_statusBarCheckBoxMenuItemItemStateChanged
        statusbarPanel.setVisible(statusBarCheckBoxMenuItem.isSelected());
    }//GEN-LAST:event_statusBarCheckBoxMenuItemItemStateChanged

    private void lineNumberCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineNumberCheckBoxMenuItemActionPerformed

    }//GEN-LAST:event_lineNumberCheckBoxMenuItemActionPerformed

    private void lineNumberCheckBoxMenuItemStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lineNumberCheckBoxMenuItemStateChanged
        rTextScrollPane.setLineNumbersEnabled(lineNumberCheckBoxMenuItem.isSelected());
    }//GEN-LAST:event_lineNumberCheckBoxMenuItemStateChanged

    private void defaultRadioButtonMenuItemStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_defaultRadioButtonMenuItemStateChanged
        setTheme();
    }//GEN-LAST:event_defaultRadioButtonMenuItemStateChanged

    private void dracullaRadioButtonMenuItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dracullaRadioButtonMenuItemItemStateChanged
        setTheme();
    }//GEN-LAST:event_dracullaRadioButtonMenuItemItemStateChanged

    private void metalRadioButtonMenuItem3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_metalRadioButtonMenuItem3ItemStateChanged
        setTheme();
    }//GEN-LAST:event_metalRadioButtonMenuItem3ItemStateChanged

    private void blueRadioButtonMenuItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_blueRadioButtonMenuItemItemStateChanged
        setTheme();
    }//GEN-LAST:event_blueRadioButtonMenuItemItemStateChanged

    private void pinkRadioButtonMenuItem5ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pinkRadioButtonMenuItem5ItemStateChanged
        setTheme();
    }//GEN-LAST:event_pinkRadioButtonMenuItem5ItemStateChanged

    private void increaFontMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaFontMenuItemActionPerformed
        changeFontSize(2);
    }//GEN-LAST:event_increaFontMenuItemActionPerformed

    private void decreaseFontMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseFontMenuItemActionPerformed
        changeFontSize(-2);
    }//GEN-LAST:event_decreaseFontMenuItemActionPerformed

    private void gotoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gotoMenuItemActionPerformed
        GoToDialog dialog = new GoToDialog(this);
        dialog.setMaxLineNumberAllowed(textArea.getLineCount());
        dialog.setVisible(true);
        int line = dialog.getLineNumber();
        if (line > 0) {
            try {
                textArea.setCaretPosition(textArea.getLineStartOffset(line - 1));
            } catch (BadLocationException ble) { // Never happens
                UIManager.getLookAndFeel().provideErrorFeedback(textArea);
                ble.printStackTrace();
            }
        }
    }//GEN-LAST:event_gotoMenuItemActionPerformed

    private void textAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyTyped

    }//GEN-LAST:event_textAreaKeyTyped

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        saveAs();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void menuCloseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCloseFileActionPerformed
        int val = JOptionPane.showConfirmDialog(this, "Do you really want to close this file?", "Sure?", JOptionPane.OK_CANCEL_OPTION);
        if (val == 0) {
            textArea.setText("");
            setTitle(TITLE + " - . - Untitled");
            openedFile = null;
            copyFilePathNameMenuItem.setEnabled(false);
        }
    }//GEN-LAST:event_menuCloseFileActionPerformed

    private void openTerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTerMenuItemActionPerformed
        openTerminal();
    }//GEN-LAST:event_openTerMenuItemActionPerformed

    private void findMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMenuItemActionPerformed
        new Find(this, false).setVisible(true);
    }//GEN-LAST:event_findMenuItemActionPerformed

    private void autoSaveCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoSaveCheckBoxMenuItemActionPerformed
        if (autoSaveCheckBoxMenuItem.isSelected()) {
            autoSaver = new AutoSave(openedFile, textArea, lblAutoSave);
            autoSaver.start();
            lblAutoSave.setText("Auto Save Enabled");
        } else {
            if (autoSaver.isAlive() && autoSaver != null) {
                try {
                    lblAutoSave.setText("Auto Save Disabled stop");
                    autoSaver.interrupt();

                } catch (NullPointerException nlp) {
                    lblAutoSave.setText("Auto Save Disabled stop nlp");
                    System.out.println("nlp");
                    nlp.printStackTrace();
                } catch (Exception e) {
                    lblAutoSave.setText("Auto Save Disabled");
                }

            }
        }


    }//GEN-LAST:event_autoSaveCheckBoxMenuItemActionPerformed

    private void copyFilePathNameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyFilePathNameMenuItemActionPerformed
        if (openedFile != null && !textArea.equals("")) {
            copyFilePath(true);
        }

    }//GEN-LAST:event_copyFilePathNameMenuItemActionPerformed

    private void copyFilePathOnlyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyFilePathOnlyMenuItemActionPerformed
        copyFilePath(false);
    }//GEN-LAST:event_copyFilePathOnlyMenuItemActionPerformed

    private void findAndReplaceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findAndReplaceMenuItemActionPerformed
        new FindAndReplace(this, true).setVisible(true);
    }//GEN-LAST:event_findAndReplaceMenuItemActionPerformed

    private void lineHighlightCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineHighlightCheckBoxMenuItemActionPerformed
        textArea.setHighlightCurrentLine(lineHighlightCheckBoxMenuItem.isSelected());
    }//GEN-LAST:event_lineHighlightCheckBoxMenuItemActionPerformed

    private void dracullaRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dracullaRadioButtonMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dracullaRadioButtonMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Texter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Texter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Texter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Texter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Texter().setVisible(true);
                } catch (UnsupportedLookAndFeelException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu MenuEdit;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JMenuItem MenuItemCOpy;
    private javax.swing.JMenuItem MenuItemCut;
    private javax.swing.JMenuItem MenuItemPaste;
    private javax.swing.JMenuItem MenuItemRedo;
    private javax.swing.JMenuItem MenuItemUndo;
    private javax.swing.JMenu MenuView;
    private javax.swing.JCheckBoxMenuItem autoSaveCheckBoxMenuItem;
    private javax.swing.JRadioButtonMenuItem blueRadioButtonMenuItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenuItem copyFilePathNameMenuItem;
    private javax.swing.JMenuItem copyFilePathOnlyMenuItem;
    private javax.swing.JMenuItem decreaseFontMenuItem;
    private javax.swing.JRadioButtonMenuItem defaultRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem dracullaRadioButtonMenuItem;
    private javax.swing.JMenuItem findAndReplaceMenuItem;
    private javax.swing.JMenuItem findMenuItem;
    private javax.swing.JMenuItem gotoMenuItem;
    private javax.swing.JMenuItem increaFontMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JLabel lblAutoSave;
    private javax.swing.JLabel lblFileType;
    private javax.swing.JLabel lblLineNo;
    private javax.swing.JLabel lblTabsize;
    private javax.swing.JCheckBoxMenuItem lineHighlightCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem lineNumberCheckBoxMenuItem;
    private javax.swing.JMenuItem menuCloseFile;
    private javax.swing.JMenuItem menuNewFile;
    private javax.swing.JMenuItem menuNewWindow;
    private javax.swing.JMenuItem menuOpen;
    private javax.swing.JMenuItem menuQuit;
    private javax.swing.JRadioButtonMenuItem metalRadioButtonMenuItem3;
    private javax.swing.JMenuItem openTerMenuItem;
    private javax.swing.JRadioButtonMenuItem pinkRadioButtonMenuItem5;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaHighlighter rSyntaxTextAreaHighlighter1;
    private org.fife.ui.rtextarea.RTextScrollPane rTextScrollPane;
    private javax.swing.JMenu searchMenu;
    private javax.swing.JCheckBoxMenuItem statusBarCheckBoxMenuItem;
    private javax.swing.JPanel statusbarPanel;
    public static org.fife.ui.rsyntaxtextarea.RSyntaxTextArea textArea;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JCheckBoxMenuItem wrapTextCheckBoxMenuItem;
    // End of variables declaration//GEN-END:variables

    private String readFile(File file_path) {
        String records = "";
        try {

            FileReader fr = new FileReader(file_path);
            BufferedReader txtReader = new BufferedReader(fr);

            String line;

            while ((line = txtReader.readLine()) != null) {
                records = records + line + "\n";
            }
            txtReader.close();
            fr.close();

        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return records;

    }

    private void openFile() {
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setDialogTitle("Open File");
        int returnVal = fc.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openedFile = fc.getSelectedFile();
            String fileName = openedFile.getName();

            setSyntax(getFileExt(fileName));

            setTitle("Texter -.- " + openedFile.getAbsolutePath());
            textArea.setText(readFile(openedFile));
            textArea.setCaretPosition(0);

            //if file is opened the enable copy file path muenuitem
            copyFilePathNameMenuItem.setEnabled(true);
            copyFilePathOnlyMenuItem.setEnabled(true);
        }

    }

    private void setSyntax(String file_extension) {
        String ext = file_extension;
        String syntaxStyle = "";

        switch (ext) {
            case "java":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_JAVA;
                break;

            case "html":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_HTML;
                break;

            case "htm":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_HTML;
                break;

            case "php":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_PHP;
                break;

            case "phtml":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_PHP;
                break;

            case "js":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT;
                break;

            case "c":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_C;
                break;

            case "py":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_PYTHON;
                break;

            case "sql":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_SQL;
                break;

            case "css":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_CSS;
                break;

            case "cpp":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_CPLUSPLUS;
                break;

            case "cs":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_CSHARP;
                break;

            case "jsp":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_JSP;
                break;

            case "json":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_JSON;
                break;

            default:
                ext = "txt";
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_NONE;
                break;
        }

        //if ext is html the set automatic close markup tags
        if (ext.equalsIgnoreCase("html")) {
            textArea.setCloseMarkupTags(true);

        }

        //also set the auto close curly brackets
        textArea.setCloseCurlyBraces(true);

        textArea.setSyntaxEditingStyle(syntaxStyle);

    }

//    private void findWord() {
//        Highlighter.HighlightPainter painter
//                = new DefaultHighlighter.DefaultHighlightPainter(Color.cyan);
//
//        String searchWord = JOptionPane.showInputDialog(this, "Enter word you want to search");
//        int offset = textArea.getText().indexOf(searchWord);
//        int length = searchWord.length();
//
//        if (offset == -1) {
//            JOptionPane.showMessageDialog(this, "could not found match..", "Error", JOptionPane.ERROR_MESSAGE);
//        }
//        while (offset != -1) {
//            try {
//                textArea.getHighlighter().addHighlight(offset, offset + length, painter);
//                offset = textArea.getText().indexOf(searchWord, offset + 1);
//            } catch (BadLocationException ble) {
//                JOptionPane.showMessageDialog(this, "could not found match..", "Error", JOptionPane.ERROR_MESSAGE);
//            }
//        }
//
//    }
    private String getFileExt(String filename) {
        if (filename == null) {
            return null;
        }
        int lastUnixPos = filename.lastIndexOf('/');
        int lastWindowsPos = filename.lastIndexOf('\\');
        int indexOfLastSeparator = Math.max(lastUnixPos, lastWindowsPos);
        int extensionPos = filename.lastIndexOf('.');
        int lastSeparator = indexOfLastSeparator;
        int indexOfExtension = lastSeparator > extensionPos ? -1 : extensionPos;
        int index = indexOfExtension;
        if (index == -1) {
            return "";
        } else {
            lblFileType.setText(getFileType(filename.substring(index + 1)));
            return filename.substring(index + 1);

        }
    }

    private void saveFile() {
        if (openedFile != null) {
            try {
                //openFile = fileSaver.getSelectedFile();

                setSyntax(getFileExt(openedFile.toString()));
                setTitle(TITLE + " -.- " + openedFile.getAbsolutePath());
                FileWriter fw = new FileWriter(openedFile);
                fw.write(textArea.getText());
                fw.close();
                setTitle(TITLE + "- . - " + openedFile.getAbsolutePath());
                lblAutoSave.setText("File Saved");

            } catch (IOException e) {
                e.printStackTrace();
            }

        } else {
            fileSaver = new JFileChooser();
            fileSaver.setDialogTitle("Save File");
            int returnVal = fileSaver.showSaveDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    openedFile = fileSaver.getSelectedFile();

                    setSyntax(getFileExt(openedFile.toString()));
                    setTitle(TITLE + " -.- " + openedFile.getAbsolutePath());
                    FileWriter fw = new FileWriter(openedFile);
                    fw.write(textArea.getText());
                    fw.close();
                    setTitle(TITLE + "- . - " + openedFile.getAbsolutePath());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            //if file is saved the enable copy file path muenuitem
            copyFilePathNameMenuItem.setEnabled(true);
            copyFilePathOnlyMenuItem.setEnabled(true);
        }

    }

    private void getLine_Col_No() {
        int colCount = textArea.getCaretPosition();
        int lineCount = textArea.getCaretLineNumber() + 1;
        lblLineNo.setText("Line " + lineCount + " " + "Col " + colCount);

    }

    private void setTheme(){

        //themes sucks but have to stuck with it
        //until find a better way
        if (defaultRadioButtonMenuItem.isSelected()) {
            textArea.setBackground(Color.WHITE);
            textArea.setCurrentLineHighlightColor(Color.YELLOW);
            rTextScrollPane.getGutter().setBackground(Color.WHITE);
            
           
        }

        if (dracullaRadioButtonMenuItem.isSelected()) {
            textArea.setBackground(Color.BLACK);
            textArea.setCurrentLineHighlightColor(Color.LIGHT_GRAY);
            rTextScrollPane.getGutter().setBackground(Color.LIGHT_GRAY);

        }

        if (metalRadioButtonMenuItem3.isSelected()) {
            textArea.setBackground(Color.LIGHT_GRAY);
            textArea.setCurrentLineHighlightColor(Color.GREEN);
            rTextScrollPane.getGutter().setBackground(Color.LIGHT_GRAY);
        }

        if (blueRadioButtonMenuItem.isSelected()) {
            textArea.setBackground(Color.BLUE);
            textArea.setCurrentLineHighlightColor(Color.CYAN);
            rTextScrollPane.getGutter().setBackground(Color.CYAN);
        }

        if (pinkRadioButtonMenuItem5.isSelected()) {
            textArea.setBackground(Color.PINK);
            textArea.setCurrentLineHighlightColor(Color.MAGENTA);
            rTextScrollPane.getGutter().setBackground(Color.MAGENTA);
        }

    }

    private void changeFontSize(int change_value) {

        Font defaultFont = textArea.getFont();
        int size = defaultFont.getSize() + change_value;
        System.out.println(size);
        if (size < 8) {
            size = 8;//do not let the size be less than 8 coz it makes no sense
        }
        Font newFont = new Font(defaultFont.getFontName(), defaultFont.getStyle(), size);
        textArea.setFont(newFont);

    }

    private void saveAs() {
        fileSaver = new JFileChooser();
        fileSaver.setDialogTitle("Save As");
        int returnVal = fileSaver.showSaveDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                openedFile = fileSaver.getSelectedFile();

                setSyntax(getFileExt(openedFile.toString()));
                setTitle(TITLE + " - . - " + openedFile.getAbsolutePath());
                FileWriter fw = new FileWriter(openedFile);
                fw.write(textArea.getText());
                fw.close();
                setTitle(TITLE + "- . - " + openedFile.getAbsolutePath());
            } catch (IOException e) {
                e.printStackTrace();
            }

            //if file is saved the enable copy file path muenuitem
            copyFilePathNameMenuItem.setEnabled(true);
        }
    }

    private void openTerminal() {
        try {
            String command = "cmd c/start cmd.exe";
            String[] args = {"xterm", "-c", "cd"};

            if (OSValidator.isWindows()) {
                Process pr = new ProcessBuilder(command).start();
            }

            if (OSValidator.isLinux()) {
                Process pr = new ProcessBuilder(args).start();
            }

//            Process rt = Runtime.getRuntime().exec("/bin/bash");
//            Process pr = rt.exec(args);
        } catch (IOException ex) {

            ex.printStackTrace();
        }
    }

    //return the textarea to be used for searching n replacing class
    public static RSyntaxTextArea getArea() {
        return textArea;
    }

    private void copyFilePath(boolean withName) {
        String filePath = "";

        if (withName) {
            filePath = openedFile.getAbsolutePath();
        } else {
            filePath = openedFile.getAbsolutePath().replace("/" + openedFile.getName(), "");

        }

        StringSelection strToCopy = new StringSelection(filePath);

        Clipboard clpBrd = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpBrd.setContents(strToCopy, null);

    }

    private String getFileType(String fileExt) {
        String type = "";

        switch (fileExt) {
            case "java":
                type = "Java";
                break;

            case "c":
                type = "C";
                break;

            case "cpp":
                type = "C++";
                break;

            case "php":
                type = "PHP";
                break;

            case "phtml":
                type = "PHP";
                break;

            case "js":
                type = "JavaScript";
                break;

            case "html":
                type = "HTML";
                break;

            case "htm":
                type = "HTML";
                break;

            case "json":
                type = "JSON";
                break;

            case "jsp":
                type = "JSP";
                break;

            case "css":
                type = "CSS";
                break;

            case "cs":
                type = "C#";
                break;

            case "sql":
                type = "SQL";
                break;

            case "xml":
                type = "XML";
                break;

            case "py":
                type = "Python";
                break;
            default:
                type = "Plain Text";
                break;
        }

        return type;
    }

}
